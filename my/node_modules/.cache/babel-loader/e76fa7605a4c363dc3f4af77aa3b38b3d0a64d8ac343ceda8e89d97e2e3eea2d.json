{"ast":null,"code":"import _classCallCheck from \"C:/Users/HP/3D Objects/portfolio/my/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/HP/3D Objects/portfolio/my/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getDistance, getRangeMax, getRangeValue } from \"tsparticles-engine\";\nimport { applyDistance, getProximitySpeedFactor, move as _move, spin } from \"./Utils\";\nvar diffFactor = 2;\nexport var BaseMover = /*#__PURE__*/function () {\n  function BaseMover() {\n    _classCallCheck(this, BaseMover);\n    this._initSpin = function (particle) {\n      var _spinOptions$position;\n      var container = particle.container,\n        options = particle.options,\n        spinOptions = options.move.spin;\n      if (!spinOptions.enable) {\n        return;\n      }\n      var spinPos = (_spinOptions$position = spinOptions.position) !== null && _spinOptions$position !== void 0 ? _spinOptions$position : {\n          x: 50,\n          y: 50\n        },\n        spinCenter = {\n          x: spinPos.x / 100 * container.canvas.size.width,\n          y: spinPos.y / 100 * container.canvas.size.height\n        },\n        pos = particle.getPosition(),\n        distance = getDistance(pos, spinCenter),\n        spinAcceleration = getRangeValue(spinOptions.acceleration);\n      particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n      particle.spin = {\n        center: spinCenter,\n        direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n        angle: particle.velocity.angle,\n        radius: distance,\n        acceleration: particle.retina.spinAcceleration\n      };\n    };\n  }\n  _createClass(BaseMover, [{\n    key: \"init\",\n    value: function init(particle) {\n      var options = particle.options,\n        gravityOptions = options.move.gravity;\n      particle.gravity = {\n        enable: gravityOptions.enable,\n        acceleration: getRangeValue(gravityOptions.acceleration),\n        inverse: gravityOptions.inverse\n      };\n      this._initSpin(particle);\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      return !particle.destroyed && particle.options.move.enable;\n    }\n  }, {\n    key: \"move\",\n    value: function move(particle, delta) {\n      var _particle$retina, _particle$retina$move, _particle$retina2, _particle$retina2$mov, _particle$retina$maxS;\n      var particleOptions = particle.options,\n        moveOptions = particleOptions.move;\n      if (!moveOptions.enable) {\n        return;\n      }\n      var container = particle.container,\n        pxRatio = container.retina.pixelRatio,\n        slowFactor = getProximitySpeedFactor(particle),\n        baseSpeed = ((_particle$retina$move = (_particle$retina = particle.retina).moveSpeed) !== null && _particle$retina$move !== void 0 ? _particle$retina$move : _particle$retina.moveSpeed = getRangeValue(moveOptions.speed) * pxRatio) * container.retina.reduceFactor,\n        moveDrift = (_particle$retina2$mov = (_particle$retina2 = particle.retina).moveDrift) !== null && _particle$retina2$mov !== void 0 ? _particle$retina2$mov : _particle$retina2.moveDrift = getRangeValue(particle.options.move.drift) * pxRatio,\n        maxSize = getRangeMax(particleOptions.size.value) * pxRatio,\n        sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1,\n        moveSpeed = baseSpeed * sizeFactor * slowFactor * (delta.factor || 1) / diffFactor,\n        maxSpeed = (_particle$retina$maxS = particle.retina.maxSpeed) !== null && _particle$retina$maxS !== void 0 ? _particle$retina$maxS : container.retina.maxSpeed;\n      if (moveOptions.spin.enable) {\n        spin(particle, moveSpeed);\n      } else {\n        _move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta);\n      }\n      applyDistance(particle);\n    }\n  }]);\n  return BaseMover;\n}();","map":{"version":3,"names":["getDistance","getRangeMax","getRangeValue","applyDistance","getProximitySpeedFactor","move","spin","diffFactor","BaseMover","_classCallCheck","_initSpin","particle","_spinOptions$position","container","options","spinOptions","enable","spinPos","position","x","y","spinCenter","canvas","size","width","height","pos","getPosition","distance","spinAcceleration","acceleration","retina","pixelRatio","center","direction","velocity","angle","radius","_createClass","key","value","init","gravityOptions","gravity","inverse","isEnabled","destroyed","delta","_particle$retina","_particle$retina$move","_particle$retina2","_particle$retina2$mov","_particle$retina$maxS","particleOptions","moveOptions","pxRatio","slowFactor","baseSpeed","moveSpeed","speed","reduceFactor","moveDrift","drift","maxSize","sizeFactor","getRadius","factor","maxSpeed"],"sources":["C:/Users/HP/3D Objects/portfolio/my/node_modules/tsparticles-move-base/esm/BaseMover.js"],"sourcesContent":["import { getDistance, getRangeMax, getRangeValue, } from \"tsparticles-engine\";\nimport { applyDistance, getProximitySpeedFactor, move, spin } from \"./Utils\";\nconst diffFactor = 2;\nexport class BaseMover {\n    constructor() {\n        this._initSpin = (particle) => {\n            const container = particle.container, options = particle.options, spinOptions = options.move.spin;\n            if (!spinOptions.enable) {\n                return;\n            }\n            const spinPos = spinOptions.position ?? { x: 50, y: 50 }, spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            }, pos = particle.getPosition(), distance = getDistance(pos, spinCenter), spinAcceleration = getRangeValue(spinOptions.acceleration);\n            particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n            particle.spin = {\n                center: spinCenter,\n                direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n                angle: particle.velocity.angle,\n                radius: distance,\n                acceleration: particle.retina.spinAcceleration,\n            };\n        };\n    }\n    init(particle) {\n        const options = particle.options, gravityOptions = options.move.gravity;\n        particle.gravity = {\n            enable: gravityOptions.enable,\n            acceleration: getRangeValue(gravityOptions.acceleration),\n            inverse: gravityOptions.inverse,\n        };\n        this._initSpin(particle);\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && particle.options.move.enable;\n    }\n    move(particle, delta) {\n        const particleOptions = particle.options, moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = particle.container, pxRatio = container.retina.pixelRatio, slowFactor = getProximitySpeedFactor(particle), baseSpeed = (particle.retina.moveSpeed ??= getRangeValue(moveOptions.speed) * pxRatio) *\n            container.retina.reduceFactor, moveDrift = (particle.retina.moveDrift ??= getRangeValue(particle.options.move.drift) * pxRatio), maxSize = getRangeMax(particleOptions.size.value) * pxRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1, moveSpeed = (baseSpeed * sizeFactor * slowFactor * (delta.factor || 1)) / diffFactor, maxSpeed = particle.retina.maxSpeed ?? container.retina.maxSpeed;\n        if (moveOptions.spin.enable) {\n            spin(particle, moveSpeed);\n        }\n        else {\n            move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta);\n        }\n        applyDistance(particle);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}