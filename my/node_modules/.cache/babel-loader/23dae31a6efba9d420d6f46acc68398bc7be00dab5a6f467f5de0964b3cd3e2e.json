{"ast":null,"code":"import { drawLine, drawTriangle, getDistance, getDistances, getRandom, getStyleFromRgb, rangeColorToRgb } from \"tsparticles-engine\";\nexport function drawLinkLine(params) {\n  var drawn = false;\n  var begin = params.begin,\n    end = params.end,\n    maxDistance = params.maxDistance,\n    context = params.context,\n    canvasSize = params.canvasSize,\n    width = params.width,\n    backgroundMask = params.backgroundMask,\n    colorLine = params.colorLine,\n    opacity = params.opacity,\n    links = params.links;\n  if (getDistance(begin, end) <= maxDistance) {\n    drawLine(context, begin, end);\n    drawn = true;\n  } else if (links.warp) {\n    var pi1;\n    var pi2;\n    var endNE = {\n      x: end.x - canvasSize.width,\n      y: end.y\n    };\n    var d1 = getDistances(begin, endNE);\n    if (d1.distance <= maxDistance) {\n      var yi = begin.y - d1.dy / d1.dx * begin.x;\n      pi1 = {\n        x: 0,\n        y: yi\n      };\n      pi2 = {\n        x: canvasSize.width,\n        y: yi\n      };\n    } else {\n      var endSW = {\n        x: end.x,\n        y: end.y - canvasSize.height\n      };\n      var d2 = getDistances(begin, endSW);\n      if (d2.distance <= maxDistance) {\n        var _yi = begin.y - d2.dy / d2.dx * begin.x;\n        var xi = -_yi / (d2.dy / d2.dx);\n        pi1 = {\n          x: xi,\n          y: 0\n        };\n        pi2 = {\n          x: xi,\n          y: canvasSize.height\n        };\n      } else {\n        var endSE = {\n          x: end.x - canvasSize.width,\n          y: end.y - canvasSize.height\n        };\n        var d3 = getDistances(begin, endSE);\n        if (d3.distance <= maxDistance) {\n          var _yi2 = begin.y - d3.dy / d3.dx * begin.x;\n          var _xi = -_yi2 / (d3.dy / d3.dx);\n          pi1 = {\n            x: _xi,\n            y: _yi2\n          };\n          pi2 = {\n            x: pi1.x + canvasSize.width,\n            y: pi1.y + canvasSize.height\n          };\n        }\n      }\n    }\n    if (pi1 && pi2) {\n      drawLine(context, begin, pi1);\n      drawLine(context, end, pi2);\n      drawn = true;\n    }\n  }\n  if (!drawn) {\n    return;\n  }\n  context.lineWidth = width;\n  if (backgroundMask.enable) {\n    context.globalCompositeOperation = backgroundMask.composite;\n  }\n  context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n  var shadow = links.shadow;\n  if (shadow.enable) {\n    var shadowColor = rangeColorToRgb(shadow.color);\n    if (shadowColor) {\n      context.shadowBlur = shadow.blur;\n      context.shadowColor = getStyleFromRgb(shadowColor);\n    }\n  }\n  context.stroke();\n}\nexport function drawLinkTriangle(params) {\n  var context = params.context,\n    pos1 = params.pos1,\n    pos2 = params.pos2,\n    pos3 = params.pos3,\n    backgroundMask = params.backgroundMask,\n    colorTriangle = params.colorTriangle,\n    opacityTriangle = params.opacityTriangle;\n  drawTriangle(context, pos1, pos2, pos3);\n  if (backgroundMask.enable) {\n    context.globalCompositeOperation = backgroundMask.composite;\n  }\n  context.fillStyle = getStyleFromRgb(colorTriangle, opacityTriangle);\n  context.fill();\n}\nexport function getLinkKey(ids) {\n  ids.sort(function (a, b) {\n    return a - b;\n  });\n  return ids.join(\"_\");\n}\nexport function setLinkFrequency(particles, dictionary) {\n  var key = getLinkKey(particles.map(function (t) {\n    return t.id;\n  }));\n  var res = dictionary.get(key);\n  if (res === undefined) {\n    res = getRandom();\n    dictionary.set(key, res);\n  }\n  return res;\n}","map":{"version":3,"names":["drawLine","drawTriangle","getDistance","getDistances","getRandom","getStyleFromRgb","rangeColorToRgb","drawLinkLine","params","drawn","begin","end","maxDistance","context","canvasSize","width","backgroundMask","colorLine","opacity","links","warp","pi1","pi2","endNE","x","y","d1","distance","yi","dy","dx","endSW","height","d2","xi","endSE","d3","lineWidth","enable","globalCompositeOperation","composite","strokeStyle","shadow","shadowColor","color","shadowBlur","blur","stroke","drawLinkTriangle","pos1","pos2","pos3","colorTriangle","opacityTriangle","fillStyle","fill","getLinkKey","ids","sort","a","b","join","setLinkFrequency","particles","dictionary","key","map","t","id","res","get","undefined","set"],"sources":["C:/Users/HP/3D Objects/portfolio/my/node_modules/tsparticles-interaction-particles-links/esm/Utils.js"],"sourcesContent":["import { drawLine, drawTriangle, getDistance, getDistances, getRandom, getStyleFromRgb, rangeColorToRgb, } from \"tsparticles-engine\";\nexport function drawLinkLine(params) {\n    let drawn = false;\n    const { begin, end, maxDistance, context, canvasSize, width, backgroundMask, colorLine, opacity, links } = params;\n    if (getDistance(begin, end) <= maxDistance) {\n        drawLine(context, begin, end);\n        drawn = true;\n    }\n    else if (links.warp) {\n        let pi1;\n        let pi2;\n        const endNE = {\n            x: end.x - canvasSize.width,\n            y: end.y,\n        };\n        const d1 = getDistances(begin, endNE);\n        if (d1.distance <= maxDistance) {\n            const yi = begin.y - (d1.dy / d1.dx) * begin.x;\n            pi1 = { x: 0, y: yi };\n            pi2 = { x: canvasSize.width, y: yi };\n        }\n        else {\n            const endSW = {\n                x: end.x,\n                y: end.y - canvasSize.height,\n            };\n            const d2 = getDistances(begin, endSW);\n            if (d2.distance <= maxDistance) {\n                const yi = begin.y - (d2.dy / d2.dx) * begin.x;\n                const xi = -yi / (d2.dy / d2.dx);\n                pi1 = { x: xi, y: 0 };\n                pi2 = { x: xi, y: canvasSize.height };\n            }\n            else {\n                const endSE = {\n                    x: end.x - canvasSize.width,\n                    y: end.y - canvasSize.height,\n                };\n                const d3 = getDistances(begin, endSE);\n                if (d3.distance <= maxDistance) {\n                    const yi = begin.y - (d3.dy / d3.dx) * begin.x;\n                    const xi = -yi / (d3.dy / d3.dx);\n                    pi1 = { x: xi, y: yi };\n                    pi2 = { x: pi1.x + canvasSize.width, y: pi1.y + canvasSize.height };\n                }\n            }\n        }\n        if (pi1 && pi2) {\n            drawLine(context, begin, pi1);\n            drawLine(context, end, pi2);\n            drawn = true;\n        }\n    }\n    if (!drawn) {\n        return;\n    }\n    context.lineWidth = width;\n    if (backgroundMask.enable) {\n        context.globalCompositeOperation = backgroundMask.composite;\n    }\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    const { shadow } = links;\n    if (shadow.enable) {\n        const shadowColor = rangeColorToRgb(shadow.color);\n        if (shadowColor) {\n            context.shadowBlur = shadow.blur;\n            context.shadowColor = getStyleFromRgb(shadowColor);\n        }\n    }\n    context.stroke();\n}\nexport function drawLinkTriangle(params) {\n    const { context, pos1, pos2, pos3, backgroundMask, colorTriangle, opacityTriangle } = params;\n    drawTriangle(context, pos1, pos2, pos3);\n    if (backgroundMask.enable) {\n        context.globalCompositeOperation = backgroundMask.composite;\n    }\n    context.fillStyle = getStyleFromRgb(colorTriangle, opacityTriangle);\n    context.fill();\n}\nexport function getLinkKey(ids) {\n    ids.sort((a, b) => a - b);\n    return ids.join(\"_\");\n}\nexport function setLinkFrequency(particles, dictionary) {\n    const key = getLinkKey(particles.map((t) => t.id));\n    let res = dictionary.get(key);\n    if (res === undefined) {\n        res = getRandom();\n        dictionary.set(key, res);\n    }\n    return res;\n}\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,YAAY,EAAEC,WAAW,EAAEC,YAAY,EAAEC,SAAS,EAAEC,eAAe,EAAEC,eAAe,QAAS,oBAAoB;AACpI,OAAO,SAASC,YAAYA,CAACC,MAAM,EAAE;EACjC,IAAIC,KAAK,GAAG,KAAK;EACjB,IAAQC,KAAK,GAA8FF,MAAM,CAAzGE,KAAK;IAAEC,GAAG,GAAyFH,MAAM,CAAlGG,GAAG;IAAEC,WAAW,GAA4EJ,MAAM,CAA7FI,WAAW;IAAEC,OAAO,GAAmEL,MAAM,CAAhFK,OAAO;IAAEC,UAAU,GAAuDN,MAAM,CAAvEM,UAAU;IAAEC,KAAK,GAAgDP,MAAM,CAA3DO,KAAK;IAAEC,cAAc,GAAgCR,MAAM,CAApDQ,cAAc;IAAEC,SAAS,GAAqBT,MAAM,CAApCS,SAAS;IAAEC,OAAO,GAAYV,MAAM,CAAzBU,OAAO;IAAEC,KAAK,GAAKX,MAAM,CAAhBW,KAAK;EACtG,IAAIjB,WAAW,CAACQ,KAAK,EAAEC,GAAG,CAAC,IAAIC,WAAW,EAAE;IACxCZ,QAAQ,CAACa,OAAO,EAAEH,KAAK,EAAEC,GAAG,CAAC;IAC7BF,KAAK,GAAG,IAAI;EAChB,CAAC,MACI,IAAIU,KAAK,CAACC,IAAI,EAAE;IACjB,IAAIC,GAAG;IACP,IAAIC,GAAG;IACP,IAAMC,KAAK,GAAG;MACVC,CAAC,EAAEb,GAAG,CAACa,CAAC,GAAGV,UAAU,CAACC,KAAK;MAC3BU,CAAC,EAAEd,GAAG,CAACc;IACX,CAAC;IACD,IAAMC,EAAE,GAAGvB,YAAY,CAACO,KAAK,EAAEa,KAAK,CAAC;IACrC,IAAIG,EAAE,CAACC,QAAQ,IAAIf,WAAW,EAAE;MAC5B,IAAMgB,EAAE,GAAGlB,KAAK,CAACe,CAAC,GAAIC,EAAE,CAACG,EAAE,GAAGH,EAAE,CAACI,EAAE,GAAIpB,KAAK,CAACc,CAAC;MAC9CH,GAAG,GAAG;QAAEG,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAEG;MAAG,CAAC;MACrBN,GAAG,GAAG;QAAEE,CAAC,EAAEV,UAAU,CAACC,KAAK;QAAEU,CAAC,EAAEG;MAAG,CAAC;IACxC,CAAC,MACI;MACD,IAAMG,KAAK,GAAG;QACVP,CAAC,EAAEb,GAAG,CAACa,CAAC;QACRC,CAAC,EAAEd,GAAG,CAACc,CAAC,GAAGX,UAAU,CAACkB;MAC1B,CAAC;MACD,IAAMC,EAAE,GAAG9B,YAAY,CAACO,KAAK,EAAEqB,KAAK,CAAC;MACrC,IAAIE,EAAE,CAACN,QAAQ,IAAIf,WAAW,EAAE;QAC5B,IAAMgB,GAAE,GAAGlB,KAAK,CAACe,CAAC,GAAIQ,EAAE,CAACJ,EAAE,GAAGI,EAAE,CAACH,EAAE,GAAIpB,KAAK,CAACc,CAAC;QAC9C,IAAMU,EAAE,GAAG,CAACN,GAAE,IAAIK,EAAE,CAACJ,EAAE,GAAGI,EAAE,CAACH,EAAE,CAAC;QAChCT,GAAG,GAAG;UAAEG,CAAC,EAAEU,EAAE;UAAET,CAAC,EAAE;QAAE,CAAC;QACrBH,GAAG,GAAG;UAAEE,CAAC,EAAEU,EAAE;UAAET,CAAC,EAAEX,UAAU,CAACkB;QAAO,CAAC;MACzC,CAAC,MACI;QACD,IAAMG,KAAK,GAAG;UACVX,CAAC,EAAEb,GAAG,CAACa,CAAC,GAAGV,UAAU,CAACC,KAAK;UAC3BU,CAAC,EAAEd,GAAG,CAACc,CAAC,GAAGX,UAAU,CAACkB;QAC1B,CAAC;QACD,IAAMI,EAAE,GAAGjC,YAAY,CAACO,KAAK,EAAEyB,KAAK,CAAC;QACrC,IAAIC,EAAE,CAACT,QAAQ,IAAIf,WAAW,EAAE;UAC5B,IAAMgB,IAAE,GAAGlB,KAAK,CAACe,CAAC,GAAIW,EAAE,CAACP,EAAE,GAAGO,EAAE,CAACN,EAAE,GAAIpB,KAAK,CAACc,CAAC;UAC9C,IAAMU,GAAE,GAAG,CAACN,IAAE,IAAIQ,EAAE,CAACP,EAAE,GAAGO,EAAE,CAACN,EAAE,CAAC;UAChCT,GAAG,GAAG;YAAEG,CAAC,EAAEU,GAAE;YAAET,CAAC,EAAEG;UAAG,CAAC;UACtBN,GAAG,GAAG;YAAEE,CAAC,EAAEH,GAAG,CAACG,CAAC,GAAGV,UAAU,CAACC,KAAK;YAAEU,CAAC,EAAEJ,GAAG,CAACI,CAAC,GAAGX,UAAU,CAACkB;UAAO,CAAC;QACvE;MACJ;IACJ;IACA,IAAIX,GAAG,IAAIC,GAAG,EAAE;MACZtB,QAAQ,CAACa,OAAO,EAAEH,KAAK,EAAEW,GAAG,CAAC;MAC7BrB,QAAQ,CAACa,OAAO,EAAEF,GAAG,EAAEW,GAAG,CAAC;MAC3Bb,KAAK,GAAG,IAAI;IAChB;EACJ;EACA,IAAI,CAACA,KAAK,EAAE;IACR;EACJ;EACAI,OAAO,CAACwB,SAAS,GAAGtB,KAAK;EACzB,IAAIC,cAAc,CAACsB,MAAM,EAAE;IACvBzB,OAAO,CAAC0B,wBAAwB,GAAGvB,cAAc,CAACwB,SAAS;EAC/D;EACA3B,OAAO,CAAC4B,WAAW,GAAGpC,eAAe,CAACY,SAAS,EAAEC,OAAO,CAAC;EACzD,IAAQwB,MAAM,GAAKvB,KAAK,CAAhBuB,MAAM;EACd,IAAIA,MAAM,CAACJ,MAAM,EAAE;IACf,IAAMK,WAAW,GAAGrC,eAAe,CAACoC,MAAM,CAACE,KAAK,CAAC;IACjD,IAAID,WAAW,EAAE;MACb9B,OAAO,CAACgC,UAAU,GAAGH,MAAM,CAACI,IAAI;MAChCjC,OAAO,CAAC8B,WAAW,GAAGtC,eAAe,CAACsC,WAAW,CAAC;IACtD;EACJ;EACA9B,OAAO,CAACkC,MAAM,CAAC,CAAC;AACpB;AACA,OAAO,SAASC,gBAAgBA,CAACxC,MAAM,EAAE;EACrC,IAAQK,OAAO,GAAuEL,MAAM,CAApFK,OAAO;IAAEoC,IAAI,GAAiEzC,MAAM,CAA3EyC,IAAI;IAAEC,IAAI,GAA2D1C,MAAM,CAArE0C,IAAI;IAAEC,IAAI,GAAqD3C,MAAM,CAA/D2C,IAAI;IAAEnC,cAAc,GAAqCR,MAAM,CAAzDQ,cAAc;IAAEoC,aAAa,GAAsB5C,MAAM,CAAzC4C,aAAa;IAAEC,eAAe,GAAK7C,MAAM,CAA1B6C,eAAe;EACjFpD,YAAY,CAACY,OAAO,EAAEoC,IAAI,EAAEC,IAAI,EAAEC,IAAI,CAAC;EACvC,IAAInC,cAAc,CAACsB,MAAM,EAAE;IACvBzB,OAAO,CAAC0B,wBAAwB,GAAGvB,cAAc,CAACwB,SAAS;EAC/D;EACA3B,OAAO,CAACyC,SAAS,GAAGjD,eAAe,CAAC+C,aAAa,EAAEC,eAAe,CAAC;EACnExC,OAAO,CAAC0C,IAAI,CAAC,CAAC;AAClB;AACA,OAAO,SAASC,UAAUA,CAACC,GAAG,EAAE;EAC5BA,GAAG,CAACC,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;IAAA,OAAKD,CAAC,GAAGC,CAAC;EAAA,EAAC;EACzB,OAAOH,GAAG,CAACI,IAAI,CAAC,GAAG,CAAC;AACxB;AACA,OAAO,SAASC,gBAAgBA,CAACC,SAAS,EAAEC,UAAU,EAAE;EACpD,IAAMC,GAAG,GAAGT,UAAU,CAACO,SAAS,CAACG,GAAG,CAAC,UAACC,CAAC;IAAA,OAAKA,CAAC,CAACC,EAAE;EAAA,EAAC,CAAC;EAClD,IAAIC,GAAG,GAAGL,UAAU,CAACM,GAAG,CAACL,GAAG,CAAC;EAC7B,IAAII,GAAG,KAAKE,SAAS,EAAE;IACnBF,GAAG,GAAGjE,SAAS,CAAC,CAAC;IACjB4D,UAAU,CAACQ,GAAG,CAACP,GAAG,EAAEI,GAAG,CAAC;EAC5B;EACA,OAAOA,GAAG;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}