{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/HP/3D Objects/portfolio/my/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/HP/3D Objects/portfolio/my/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/HP/3D Objects/portfolio/my/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Circle } from \"./Circle\";\nimport { Rectangle } from \"./Rectangle\";\nimport { getDistance } from \"../../Utils/NumberUtils\";\nexport var QuadTree = /*#__PURE__*/function () {\n  function QuadTree(rectangle, capacity) {\n    var _this = this;\n    _classCallCheck(this, QuadTree);\n    this.rectangle = rectangle;\n    this.capacity = capacity;\n    this._subdivide = function () {\n      var _this$rectangle$posit = _this.rectangle.position,\n        x = _this$rectangle$posit.x,\n        y = _this$rectangle$posit.y,\n        _this$rectangle$size = _this.rectangle.size,\n        width = _this$rectangle$size.width,\n        height = _this$rectangle$size.height,\n        capacity = _this.capacity;\n      for (var i = 0; i < 4; i++) {\n        _this._subs.push(new QuadTree(new Rectangle(x + width / 2 * (i % 2), y + height / 2 * (Math.round(i / 2) - i % 2), width / 2, height / 2), capacity));\n      }\n      _this._divided = true;\n    };\n    this._points = [];\n    this._divided = false;\n    this._subs = [];\n  }\n  _createClass(QuadTree, [{\n    key: \"insert\",\n    value: function insert(point) {\n      if (!this.rectangle.contains(point.position)) {\n        return false;\n      }\n      if (this._points.length < this.capacity) {\n        this._points.push(point);\n        return true;\n      }\n      if (!this._divided) {\n        this._subdivide();\n      }\n      return this._subs.some(function (sub) {\n        return sub.insert(point);\n      });\n    }\n  }, {\n    key: \"query\",\n    value: function query(range, check, found) {\n      var res = found || [];\n      if (!range.intersects(this.rectangle)) {\n        return [];\n      }\n      var _iterator = _createForOfIteratorHelper(this._points),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var p = _step.value;\n          if (!range.contains(p.position) && getDistance(range.position, p.position) > p.particle.getRadius() && (!check || check(p.particle))) {\n            continue;\n          }\n          res.push(p.particle);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (this._divided) {\n        var _iterator2 = _createForOfIteratorHelper(this._subs),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var sub = _step2.value;\n            sub.query(range, check, res);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n      return res;\n    }\n  }, {\n    key: \"queryCircle\",\n    value: function queryCircle(position, radius, check) {\n      return this.query(new Circle(position.x, position.y, radius), check);\n    }\n  }, {\n    key: \"queryRectangle\",\n    value: function queryRectangle(position, size, check) {\n      return this.query(new Rectangle(position.x, position.y, size.width, size.height), check);\n    }\n  }]);\n  return QuadTree;\n}();","map":{"version":3,"names":["Circle","Rectangle","getDistance","QuadTree","rectangle","capacity","_this","_classCallCheck","_subdivide","_this$rectangle$posit","position","x","y","_this$rectangle$size","size","width","height","i","_subs","push","Math","round","_divided","_points","_createClass","key","value","insert","point","contains","length","some","sub","query","range","check","found","res","intersects","_iterator","_createForOfIteratorHelper","_step","s","n","done","p","particle","getRadius","err","e","f","_iterator2","_step2","queryCircle","radius","queryRectangle"],"sources":["C:/Users/HP/3D Objects/portfolio/my/node_modules/tsparticles-engine/esm/Core/Utils/QuadTree.js"],"sourcesContent":["import { Circle } from \"./Circle\";\nimport { Rectangle } from \"./Rectangle\";\nimport { getDistance } from \"../../Utils/NumberUtils\";\nexport class QuadTree {\n    constructor(rectangle, capacity) {\n        this.rectangle = rectangle;\n        this.capacity = capacity;\n        this._subdivide = () => {\n            const { x, y } = this.rectangle.position, { width, height } = this.rectangle.size, { capacity } = this;\n            for (let i = 0; i < 4; i++) {\n                this._subs.push(new QuadTree(new Rectangle(x + (width / 2) * (i % 2), y + (height / 2) * (Math.round(i / 2) - (i % 2)), width / 2, height / 2), capacity));\n            }\n            this._divided = true;\n        };\n        this._points = [];\n        this._divided = false;\n        this._subs = [];\n    }\n    insert(point) {\n        if (!this.rectangle.contains(point.position)) {\n            return false;\n        }\n        if (this._points.length < this.capacity) {\n            this._points.push(point);\n            return true;\n        }\n        if (!this._divided) {\n            this._subdivide();\n        }\n        return this._subs.some((sub) => sub.insert(point));\n    }\n    query(range, check, found) {\n        const res = found || [];\n        if (!range.intersects(this.rectangle)) {\n            return [];\n        }\n        for (const p of this._points) {\n            if (!range.contains(p.position) &&\n                getDistance(range.position, p.position) > p.particle.getRadius() &&\n                (!check || check(p.particle))) {\n                continue;\n            }\n            res.push(p.particle);\n        }\n        if (this._divided) {\n            for (const sub of this._subs) {\n                sub.query(range, check, res);\n            }\n        }\n        return res;\n    }\n    queryCircle(position, radius, check) {\n        return this.query(new Circle(position.x, position.y, radius), check);\n    }\n    queryRectangle(position, size, check) {\n        return this.query(new Rectangle(position.x, position.y, size.width, size.height), check);\n    }\n}\n"],"mappings":";;;AAAA,SAASA,MAAM,QAAQ,UAAU;AACjC,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,WAAW,QAAQ,yBAAyB;AACrD,WAAaC,QAAQ;EACjB,SAAAA,SAAYC,SAAS,EAAEC,QAAQ,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAJ,QAAA;IAC7B,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACG,UAAU,GAAG,YAAM;MACpB,IAAAC,qBAAA,GAAiBH,KAAI,CAACF,SAAS,CAACM,QAAQ;QAAhCC,CAAC,GAAAF,qBAAA,CAADE,CAAC;QAAEC,CAAC,GAAAH,qBAAA,CAADG,CAAC;QAAAC,oBAAA,GAAkDP,KAAI,CAACF,SAAS,CAACU,IAAI;QAArCC,KAAK,GAAAF,oBAAA,CAALE,KAAK;QAAEC,MAAM,GAAAH,oBAAA,CAANG,MAAM;QAA4BX,QAAQ,GAAKC,KAAI,CAAjBD,QAAQ;MAC7F,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QACxBX,KAAI,CAACY,KAAK,CAACC,IAAI,CAAC,IAAIhB,QAAQ,CAAC,IAAIF,SAAS,CAACU,CAAC,GAAII,KAAK,GAAG,CAAC,IAAKE,CAAC,GAAG,CAAC,CAAC,EAAEL,CAAC,GAAII,MAAM,GAAG,CAAC,IAAKI,IAAI,CAACC,KAAK,CAACJ,CAAC,GAAG,CAAC,CAAC,GAAIA,CAAC,GAAG,CAAE,CAAC,EAAEF,KAAK,GAAG,CAAC,EAAEC,MAAM,GAAG,CAAC,CAAC,EAAEX,QAAQ,CAAC,CAAC;MAC9J;MACAC,KAAI,CAACgB,QAAQ,GAAG,IAAI;IACxB,CAAC;IACD,IAAI,CAACC,OAAO,GAAG,EAAE;IACjB,IAAI,CAACD,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACJ,KAAK,GAAG,EAAE;EACnB;EAACM,YAAA,CAAArB,QAAA;IAAAsB,GAAA;IAAAC,KAAA,EACD,SAAAC,OAAOC,KAAK,EAAE;MACV,IAAI,CAAC,IAAI,CAACxB,SAAS,CAACyB,QAAQ,CAACD,KAAK,CAAClB,QAAQ,CAAC,EAAE;QAC1C,OAAO,KAAK;MAChB;MACA,IAAI,IAAI,CAACa,OAAO,CAACO,MAAM,GAAG,IAAI,CAACzB,QAAQ,EAAE;QACrC,IAAI,CAACkB,OAAO,CAACJ,IAAI,CAACS,KAAK,CAAC;QACxB,OAAO,IAAI;MACf;MACA,IAAI,CAAC,IAAI,CAACN,QAAQ,EAAE;QAChB,IAAI,CAACd,UAAU,CAAC,CAAC;MACrB;MACA,OAAO,IAAI,CAACU,KAAK,CAACa,IAAI,CAAC,UAACC,GAAG;QAAA,OAAKA,GAAG,CAACL,MAAM,CAACC,KAAK,CAAC;MAAA,EAAC;IACtD;EAAC;IAAAH,GAAA;IAAAC,KAAA,EACD,SAAAO,MAAMC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAE;MACvB,IAAMC,GAAG,GAAGD,KAAK,IAAI,EAAE;MACvB,IAAI,CAACF,KAAK,CAACI,UAAU,CAAC,IAAI,CAAClC,SAAS,CAAC,EAAE;QACnC,OAAO,EAAE;MACb;MAAC,IAAAmC,SAAA,GAAAC,0BAAA,CACe,IAAI,CAACjB,OAAO;QAAAkB,KAAA;MAAA;QAA5B,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA8B;UAAA,IAAnBC,CAAC,GAAAJ,KAAA,CAAAf,KAAA;UACR,IAAI,CAACQ,KAAK,CAACL,QAAQ,CAACgB,CAAC,CAACnC,QAAQ,CAAC,IAC3BR,WAAW,CAACgC,KAAK,CAACxB,QAAQ,EAAEmC,CAAC,CAACnC,QAAQ,CAAC,GAAGmC,CAAC,CAACC,QAAQ,CAACC,SAAS,CAAC,CAAC,KAC/D,CAACZ,KAAK,IAAIA,KAAK,CAACU,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE;YAC/B;UACJ;UACAT,GAAG,CAAClB,IAAI,CAAC0B,CAAC,CAACC,QAAQ,CAAC;QACxB;MAAC,SAAAE,GAAA;QAAAT,SAAA,CAAAU,CAAA,CAAAD,GAAA;MAAA;QAAAT,SAAA,CAAAW,CAAA;MAAA;MACD,IAAI,IAAI,CAAC5B,QAAQ,EAAE;QAAA,IAAA6B,UAAA,GAAAX,0BAAA,CACG,IAAI,CAACtB,KAAK;UAAAkC,MAAA;QAAA;UAA5B,KAAAD,UAAA,CAAAT,CAAA,MAAAU,MAAA,GAAAD,UAAA,CAAAR,CAAA,IAAAC,IAAA,GAA8B;YAAA,IAAnBZ,GAAG,GAAAoB,MAAA,CAAA1B,KAAA;YACVM,GAAG,CAACC,KAAK,CAACC,KAAK,EAAEC,KAAK,EAAEE,GAAG,CAAC;UAChC;QAAC,SAAAW,GAAA;UAAAG,UAAA,CAAAF,CAAA,CAAAD,GAAA;QAAA;UAAAG,UAAA,CAAAD,CAAA;QAAA;MACL;MACA,OAAOb,GAAG;IACd;EAAC;IAAAZ,GAAA;IAAAC,KAAA,EACD,SAAA2B,YAAY3C,QAAQ,EAAE4C,MAAM,EAAEnB,KAAK,EAAE;MACjC,OAAO,IAAI,CAACF,KAAK,CAAC,IAAIjC,MAAM,CAACU,QAAQ,CAACC,CAAC,EAAED,QAAQ,CAACE,CAAC,EAAE0C,MAAM,CAAC,EAAEnB,KAAK,CAAC;IACxE;EAAC;IAAAV,GAAA;IAAAC,KAAA,EACD,SAAA6B,eAAe7C,QAAQ,EAAEI,IAAI,EAAEqB,KAAK,EAAE;MAClC,OAAO,IAAI,CAACF,KAAK,CAAC,IAAIhC,SAAS,CAACS,QAAQ,CAACC,CAAC,EAAED,QAAQ,CAACE,CAAC,EAAEE,IAAI,CAACC,KAAK,EAAED,IAAI,CAACE,MAAM,CAAC,EAAEmB,KAAK,CAAC;IAC5F;EAAC;EAAA,OAAAhC,QAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}