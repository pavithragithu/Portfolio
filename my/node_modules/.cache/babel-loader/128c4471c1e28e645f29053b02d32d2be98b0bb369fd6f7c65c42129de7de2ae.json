{"ast":null,"code":"import { clamp, getDistances, getRandom } from \"tsparticles-engine\";\nexport function applyDistance(particle) {\n  var initialPosition = particle.initialPosition,\n    _getDistances = getDistances(initialPosition, particle.position),\n    dx = _getDistances.dx,\n    dy = _getDistances.dy,\n    dxFixed = Math.abs(dx),\n    dyFixed = Math.abs(dy),\n    maxDistance = particle.retina.maxDistance,\n    hDistance = maxDistance.horizontal,\n    vDistance = maxDistance.vertical;\n  if (!hDistance && !vDistance) {\n    return;\n  }\n  if ((hDistance && dxFixed >= hDistance || vDistance && dyFixed >= vDistance) && !particle.misplaced) {\n    particle.misplaced = !!hDistance && dxFixed > hDistance || !!vDistance && dyFixed > vDistance;\n    if (hDistance) {\n      particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n    }\n    if (vDistance) {\n      particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n    }\n  } else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n    particle.misplaced = false;\n  } else if (particle.misplaced) {\n    var pos = particle.position,\n      vel = particle.velocity;\n    if (hDistance && (pos.x < initialPosition.x && vel.x < 0 || pos.x > initialPosition.x && vel.x > 0)) {\n      vel.x *= -getRandom();\n    }\n    if (vDistance && (pos.y < initialPosition.y && vel.y < 0 || pos.y > initialPosition.y && vel.y > 0)) {\n      vel.y *= -getRandom();\n    }\n  }\n}\nexport function move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta) {\n  applyPath(particle, delta);\n  var gravityOptions = particle.gravity,\n    gravityFactor = gravityOptions !== null && gravityOptions !== void 0 && gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n  if (moveDrift && moveSpeed) {\n    particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n  }\n  if (gravityOptions !== null && gravityOptions !== void 0 && gravityOptions.enable && moveSpeed) {\n    particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n  }\n  var decay = particle.moveDecay;\n  particle.velocity.multTo(decay);\n  var velocity = particle.velocity.mult(moveSpeed);\n  if (gravityOptions !== null && gravityOptions !== void 0 && gravityOptions.enable && maxSpeed > 0 && (!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed)) {\n    velocity.y = gravityFactor * maxSpeed;\n    if (moveSpeed) {\n      particle.velocity.y = velocity.y / moveSpeed;\n    }\n  }\n  var zIndexOptions = particle.options.zIndex,\n    zVelocityFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.velocityRate);\n  velocity.multTo(zVelocityFactor);\n  var position = particle.position;\n  position.addTo(velocity);\n  if (moveOptions.vibrate) {\n    position.x += Math.sin(position.x * Math.cos(position.y));\n    position.y += Math.cos(position.y * Math.sin(position.x));\n  }\n}\nexport function spin(particle, moveSpeed) {\n  var container = particle.container;\n  if (!particle.spin) {\n    return;\n  }\n  var updateFunc = {\n    x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n    y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos\n  };\n  particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n  particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n  particle.spin.radius += particle.spin.acceleration;\n  var maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n  if (particle.spin.radius > maxCanvasSize / 2) {\n    particle.spin.radius = maxCanvasSize / 2;\n    particle.spin.acceleration *= -1;\n  } else if (particle.spin.radius < 0) {\n    particle.spin.radius = 0;\n    particle.spin.acceleration *= -1;\n  }\n  particle.spin.angle += moveSpeed / 100 * (1 - particle.spin.radius / maxCanvasSize);\n}\nexport function applyPath(particle, delta) {\n  var _particle$pathGenerat;\n  var particlesOptions = particle.options,\n    pathOptions = particlesOptions.move.path,\n    pathEnabled = pathOptions.enable;\n  if (!pathEnabled) {\n    return;\n  }\n  if (particle.lastPathTime <= particle.pathDelay) {\n    particle.lastPathTime += delta.value;\n    return;\n  }\n  var path = (_particle$pathGenerat = particle.pathGenerator) === null || _particle$pathGenerat === void 0 ? void 0 : _particle$pathGenerat.generate(particle, delta);\n  if (path) {\n    particle.velocity.addTo(path);\n  }\n  if (pathOptions.clamp) {\n    particle.velocity.x = clamp(particle.velocity.x, -1, 1);\n    particle.velocity.y = clamp(particle.velocity.y, -1, 1);\n  }\n  particle.lastPathTime -= particle.pathDelay;\n}\nexport function getProximitySpeedFactor(particle) {\n  return particle.slow.inRange ? particle.slow.factor : 1;\n}","map":{"version":3,"names":["clamp","getDistances","getRandom","applyDistance","particle","initialPosition","_getDistances","position","dx","dy","dxFixed","Math","abs","dyFixed","maxDistance","retina","hDistance","horizontal","vDistance","vertical","misplaced","velocity","x","y","pos","vel","move","moveOptions","moveSpeed","maxSpeed","moveDrift","delta","applyPath","gravityOptions","gravity","gravityFactor","enable","inverse","factor","acceleration","decay","moveDecay","multTo","mult","zIndexOptions","options","zIndex","zVelocityFactor","pow","zIndexFactor","velocityRate","addTo","vibrate","sin","cos","spin","container","updateFunc","direction","center","radius","angle","maxCanvasSize","max","canvas","size","width","height","_particle$pathGenerat","particlesOptions","pathOptions","path","pathEnabled","lastPathTime","pathDelay","value","pathGenerator","generate","getProximitySpeedFactor","slow","inRange"],"sources":["C:/Users/HP/3D Objects/portfolio/my/node_modules/tsparticles-move-base/esm/Utils.js"],"sourcesContent":["import { clamp, getDistances, getRandom, } from \"tsparticles-engine\";\nexport function applyDistance(particle) {\n    const initialPosition = particle.initialPosition, { dx, dy } = getDistances(initialPosition, particle.position), dxFixed = Math.abs(dx), dyFixed = Math.abs(dy), { maxDistance } = particle.retina, hDistance = maxDistance.horizontal, vDistance = maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    if (((hDistance && dxFixed >= hDistance) || (vDistance && dyFixed >= vDistance)) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance && ((pos.x < initialPosition.x && vel.x < 0) || (pos.x > initialPosition.x && vel.x > 0))) {\n            vel.x *= -getRandom();\n        }\n        if (vDistance && ((pos.y < initialPosition.y && vel.y < 0) || (pos.y > initialPosition.y && vel.y > 0))) {\n            vel.y *= -getRandom();\n        }\n    }\n}\nexport function move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta) {\n    applyPath(particle, delta);\n    const gravityOptions = particle.gravity, gravityFactor = gravityOptions?.enable && gravityOptions.inverse ? -1 : 1;\n    if (moveDrift && moveSpeed) {\n        particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\n    }\n    if (gravityOptions?.enable && moveSpeed) {\n        particle.velocity.y += (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\n    }\n    const decay = particle.moveDecay;\n    particle.velocity.multTo(decay);\n    const velocity = particle.velocity.mult(moveSpeed);\n    if (gravityOptions?.enable &&\n        maxSpeed > 0 &&\n        ((!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed) ||\n            (gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed))) {\n        velocity.y = gravityFactor * maxSpeed;\n        if (moveSpeed) {\n            particle.velocity.y = velocity.y / moveSpeed;\n        }\n    }\n    const zIndexOptions = particle.options.zIndex, zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n    velocity.multTo(zVelocityFactor);\n    const { position } = particle;\n    position.addTo(velocity);\n    if (moveOptions.vibrate) {\n        position.x += Math.sin(position.x * Math.cos(position.y));\n        position.y += Math.cos(position.y * Math.sin(position.x));\n    }\n}\nexport function spin(particle, moveSpeed) {\n    const container = particle.container;\n    if (!particle.spin) {\n        return;\n    }\n    const updateFunc = {\n        x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n        y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos,\n    };\n    particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n    particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n    particle.spin.radius += particle.spin.acceleration;\n    const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n    if (particle.spin.radius > maxCanvasSize / 2) {\n        particle.spin.radius = maxCanvasSize / 2;\n        particle.spin.acceleration *= -1;\n    }\n    else if (particle.spin.radius < 0) {\n        particle.spin.radius = 0;\n        particle.spin.acceleration *= -1;\n    }\n    particle.spin.angle += (moveSpeed / 100) * (1 - particle.spin.radius / maxCanvasSize);\n}\nexport function applyPath(particle, delta) {\n    const particlesOptions = particle.options, pathOptions = particlesOptions.move.path, pathEnabled = pathOptions.enable;\n    if (!pathEnabled) {\n        return;\n    }\n    if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n    }\n    const path = particle.pathGenerator?.generate(particle, delta);\n    if (path) {\n        particle.velocity.addTo(path);\n    }\n    if (pathOptions.clamp) {\n        particle.velocity.x = clamp(particle.velocity.x, -1, 1);\n        particle.velocity.y = clamp(particle.velocity.y, -1, 1);\n    }\n    particle.lastPathTime -= particle.pathDelay;\n}\nexport function getProximitySpeedFactor(particle) {\n    return particle.slow.inRange ? particle.slow.factor : 1;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}