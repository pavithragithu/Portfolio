{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/3D Objects/portfolio/my/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"C:/Users/HP/3D Objects/portfolio/my/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"C:/Users/HP/3D Objects/portfolio/my/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"C:/Users/HP/3D Objects/portfolio/my/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/HP/3D Objects/portfolio/my/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/HP/3D Objects/portfolio/my/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { InteractionManager } from \"./Utils/InteractionManager\";\nimport { Particle } from \"./Particle\";\nimport { Point } from \"./Utils/Point\";\nimport { QuadTree } from \"./Utils/QuadTree\";\nimport { Rectangle } from \"./Utils/Rectangle\";\nimport { calcPositionFromSize } from \"../Utils/NumberUtils\";\nimport { errorPrefix } from \"./Utils/Constants\";\nvar qTreeCapacity = 4;\nvar qTreeRectangle = function qTreeRectangle(canvasSize) {\n  return new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2);\n};\nexport var Particles = /*#__PURE__*/function () {\n  function Particles(engine, container) {\n    var _this = this;\n    _classCallCheck(this, Particles);\n    this._applyDensity = function (options, manualCount, group) {\n      var _options$number$densi;\n      if (!((_options$number$densi = options.number.density) !== null && _options$number$densi !== void 0 && _options$number$densi.enable)) {\n        return;\n      }\n      var numberOptions = options.number,\n        densityFactor = _this._initDensityFactor(numberOptions.density),\n        optParticlesNumber = numberOptions.value,\n        optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber,\n        particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount,\n        particlesCount = Math.min(_this.count, _this._array.filter(function (t) {\n          return t.group === group;\n        }).length);\n      _this.limit = numberOptions.limit * densityFactor;\n      if (particlesCount < particlesNumber) {\n        _this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n      } else if (particlesCount > particlesNumber) {\n        _this.removeQuantity(particlesCount - particlesNumber, group);\n      }\n    };\n    this._initDensityFactor = function (densityOptions) {\n      var container = _this._container;\n      if (!container.canvas.element || !densityOptions.enable) {\n        return 1;\n      }\n      var canvas = container.canvas.element,\n        pxRatio = container.retina.pixelRatio;\n      return canvas.width * canvas.height / (densityOptions.factor * Math.pow(pxRatio, 2) * densityOptions.area);\n    };\n    this._pushParticle = function (position, overrideOptions, group, initializer) {\n      try {\n        var particle = _this.pool.pop();\n        if (particle) {\n          particle.init(_this._nextId, position, overrideOptions, group);\n        } else {\n          particle = new Particle(_this._engine, _this._nextId, _this._container, position, overrideOptions, group);\n        }\n        var canAdd = true;\n        if (initializer) {\n          canAdd = initializer(particle);\n        }\n        if (!canAdd) {\n          return;\n        }\n        _this._array.push(particle);\n        _this._zArray.push(particle);\n        _this._nextId++;\n        _this._engine.dispatchEvent(\"particleAdded\", {\n          container: _this._container,\n          data: {\n            particle: particle\n          }\n        });\n        return particle;\n      } catch (e) {\n        console.warn(\"\".concat(errorPrefix, \" adding particle: \").concat(e));\n        return;\n      }\n    };\n    this._engine = engine;\n    this._container = container;\n    this._nextId = 0;\n    this._array = [];\n    this._zArray = [];\n    this.pool = [];\n    this.limit = 0;\n    this.needsSort = false;\n    this.lastZIndex = 0;\n    this._interactionManager = new InteractionManager(this._engine, this._container);\n    var canvasSize = this._container.canvas.size;\n    this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n    this.movers = this._engine.plugins.getMovers(this._container, true);\n    this.updaters = this._engine.plugins.getUpdaters(this._container, true);\n  }\n  _createClass(Particles, [{\n    key: \"count\",\n    get: function get() {\n      return this._array.length;\n    }\n  }, {\n    key: \"addManualParticles\",\n    value: function addManualParticles() {\n      var container = this._container,\n        options = container.actualOptions;\n      var _iterator = _createForOfIteratorHelper(options.manualParticles),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var particle = _step.value;\n          this.addParticle(particle.position ? particle.position.mode === \"precise\" ? particle.position : calcPositionFromSize({\n            size: container.canvas.size,\n            position: particle.position\n          }) : undefined, particle.options);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"addParticle\",\n    value: function addParticle(position, overrideOptions, group, initializer) {\n      var container = this._container,\n        options = container.actualOptions,\n        limit = options.particles.number.limit;\n      if (limit > 0) {\n        var countToRemove = this.count + 1 - limit;\n        if (countToRemove > 0) {\n          this.removeQuantity(countToRemove);\n        }\n      }\n      return this._pushParticle(position, overrideOptions, group, initializer);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._array = [];\n      this._zArray = [];\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._array = [];\n      this._zArray = [];\n      this.movers = [];\n      this.updaters = [];\n    }\n  }, {\n    key: \"draw\",\n    value: function () {\n      var _draw = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(delta) {\n        var container, canvasSize, _iterator2, _step2, _step2$value, plugin, _iterator3, _step3, p;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              container = this._container, canvasSize = this._container.canvas.size;\n              this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n              container.canvas.clear();\n              _context.next = 5;\n              return this.update(delta);\n            case 5:\n              if (this.needsSort) {\n                this._zArray.sort(function (a, b) {\n                  return b.position.z - a.position.z || a.id - b.id;\n                });\n                this.lastZIndex = this._zArray[this._zArray.length - 1].position.z;\n                this.needsSort = false;\n              }\n              _iterator2 = _createForOfIteratorHelper(container.plugins);\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  _step2$value = _slicedToArray(_step2.value, 2), plugin = _step2$value[1];\n                  container.canvas.drawPlugin(plugin, delta);\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n              _iterator3 = _createForOfIteratorHelper(this._zArray);\n              try {\n                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                  p = _step3.value;\n                  p.draw(delta);\n                }\n              } catch (err) {\n                _iterator3.e(err);\n              } finally {\n                _iterator3.f();\n              }\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function draw(_x) {\n        return _draw.apply(this, arguments);\n      }\n      return draw;\n    }()\n  }, {\n    key: \"filter\",\n    value: function filter(condition) {\n      return this._array.filter(condition);\n    }\n  }, {\n    key: \"find\",\n    value: function find(condition) {\n      return this._array.find(condition);\n    }\n  }, {\n    key: \"handleClickMode\",\n    value: function handleClickMode(mode) {\n      this._interactionManager.handleClickMode(mode);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var container = this._container,\n        options = container.actualOptions;\n      this.lastZIndex = 0;\n      this.needsSort = false;\n      var handled = false;\n      this.updaters = this._engine.plugins.getUpdaters(container, true);\n      this._interactionManager.init();\n      var _iterator4 = _createForOfIteratorHelper(container.plugins),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _step4$value = _slicedToArray(_step4.value, 2),\n            plugin = _step4$value[1];\n          if (plugin.particlesInitialization !== undefined) {\n            handled = plugin.particlesInitialization();\n          }\n          if (handled) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      this._interactionManager.init();\n      var _iterator5 = _createForOfIteratorHelper(container.pathGenerators),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _step5$value = _slicedToArray(_step5.value, 2),\n            pathGenerator = _step5$value[1];\n          pathGenerator.init(container);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      this.addManualParticles();\n      if (!handled) {\n        for (var group in options.particles.groups) {\n          var groupOptions = options.particles.groups[group];\n          for (var i = this.count, j = 0; j < ((_groupOptions$number = groupOptions.number) === null || _groupOptions$number === void 0 ? void 0 : _groupOptions$number.value) && i < options.particles.number.value; i++, j++) {\n            var _groupOptions$number;\n            this.addParticle(undefined, groupOptions, group);\n          }\n        }\n        for (var _i = this.count; _i < options.particles.number.value; _i++) {\n          this.addParticle();\n        }\n      }\n    }\n  }, {\n    key: \"push\",\n    value: function push(nb, mouse, overrideOptions, group) {\n      this.pushing = true;\n      for (var i = 0; i < nb; i++) {\n        this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n      }\n      this.pushing = false;\n    }\n  }, {\n    key: \"redraw\",\n    value: function () {\n      var _redraw = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              this.clear();\n              this.init();\n              _context2.next = 4;\n              return this.draw({\n                value: 0,\n                factor: 0\n              });\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function redraw() {\n        return _redraw.apply(this, arguments);\n      }\n      return redraw;\n    }()\n  }, {\n    key: \"remove\",\n    value: function remove(particle, group, override) {\n      this.removeAt(this._array.indexOf(particle), undefined, group, override);\n    }\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(index) {\n      var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var group = arguments.length > 2 ? arguments[2] : undefined;\n      var override = arguments.length > 3 ? arguments[3] : undefined;\n      if (index < 0 || index > this.count) {\n        return;\n      }\n      var deleted = 0;\n      for (var i = index; deleted < quantity && i < this.count; i++) {\n        var particle = this._array[i];\n        if (!particle || particle.group !== group) {\n          continue;\n        }\n        particle.destroy(override);\n        this._array.splice(i--, 1);\n        var zIdx = this._zArray.indexOf(particle);\n        this._zArray.splice(zIdx, 1);\n        this.pool.push(particle);\n        deleted++;\n        this._engine.dispatchEvent(\"particleRemoved\", {\n          container: this._container,\n          data: {\n            particle: particle\n          }\n        });\n      }\n    }\n  }, {\n    key: \"removeQuantity\",\n    value: function removeQuantity(quantity, group) {\n      this.removeAt(0, quantity, group);\n    }\n  }, {\n    key: \"setDensity\",\n    value: function setDensity() {\n      var options = this._container.actualOptions,\n        groups = options.particles.groups;\n      for (var group in groups) {\n        this._applyDensity(groups[group], 0, group);\n      }\n      this._applyDensity(options.particles, options.manualParticles.length);\n    }\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(delta) {\n        var container, particlesToDelete, _iterator6, _step6, _step6$value, pathGenerator, _iterator7, _step7, _step7$value, plugin, _iterator8, _step8, particle, resizeFactor, _iterator10, _step10, _step10$value, _plugin, _iterator11, _step11, mover, _iterator9, _step9, _particle, _iterator12, _step12, updater;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              container = this._container, particlesToDelete = new Set();\n              _iterator6 = _createForOfIteratorHelper(container.pathGenerators);\n              try {\n                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                  _step6$value = _slicedToArray(_step6.value, 2), pathGenerator = _step6$value[1];\n                  pathGenerator.update();\n                }\n              } catch (err) {\n                _iterator6.e(err);\n              } finally {\n                _iterator6.f();\n              }\n              _iterator7 = _createForOfIteratorHelper(container.plugins);\n              try {\n                for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                  _step7$value = _slicedToArray(_step7.value, 2), plugin = _step7$value[1];\n                  plugin.update && plugin.update(delta);\n                }\n              } catch (err) {\n                _iterator7.e(err);\n              } finally {\n                _iterator7.f();\n              }\n              _iterator8 = _createForOfIteratorHelper(this._array);\n              _context3.prev = 6;\n              _iterator8.s();\n            case 8:\n              if ((_step8 = _iterator8.n()).done) {\n                _context3.next = 41;\n                break;\n              }\n              particle = _step8.value;\n              resizeFactor = container.canvas.resizeFactor;\n              if (resizeFactor && !particle.ignoresResizeRatio) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n                particle.initialPosition.x *= resizeFactor.width;\n                particle.initialPosition.y *= resizeFactor.height;\n              }\n              particle.ignoresResizeRatio = false;\n              _context3.next = 15;\n              return this._interactionManager.reset(particle);\n            case 15:\n              _iterator10 = _createForOfIteratorHelper(this._container.plugins);\n              _context3.prev = 16;\n              _iterator10.s();\n            case 18:\n              if ((_step10 = _iterator10.n()).done) {\n                _context3.next = 25;\n                break;\n              }\n              _step10$value = _slicedToArray(_step10.value, 2), _plugin = _step10$value[1];\n              if (!particle.destroyed) {\n                _context3.next = 22;\n                break;\n              }\n              return _context3.abrupt(\"break\", 25);\n            case 22:\n              if (_plugin.particleUpdate) {\n                _plugin.particleUpdate(particle, delta);\n              }\n            case 23:\n              _context3.next = 18;\n              break;\n            case 25:\n              _context3.next = 30;\n              break;\n            case 27:\n              _context3.prev = 27;\n              _context3.t0 = _context3[\"catch\"](16);\n              _iterator10.e(_context3.t0);\n            case 30:\n              _context3.prev = 30;\n              _iterator10.f();\n              return _context3.finish(30);\n            case 33:\n              _iterator11 = _createForOfIteratorHelper(this.movers);\n              try {\n                for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n                  mover = _step11.value;\n                  if (mover.isEnabled(particle)) {\n                    mover.move(particle, delta);\n                  }\n                }\n              } catch (err) {\n                _iterator11.e(err);\n              } finally {\n                _iterator11.f();\n              }\n              if (!particle.destroyed) {\n                _context3.next = 38;\n                break;\n              }\n              particlesToDelete.add(particle);\n              return _context3.abrupt(\"continue\", 39);\n            case 38:\n              this.quadTree.insert(new Point(particle.getPosition(), particle));\n            case 39:\n              _context3.next = 8;\n              break;\n            case 41:\n              _context3.next = 46;\n              break;\n            case 43:\n              _context3.prev = 43;\n              _context3.t1 = _context3[\"catch\"](6);\n              _iterator8.e(_context3.t1);\n            case 46:\n              _context3.prev = 46;\n              _iterator8.f();\n              return _context3.finish(46);\n            case 49:\n              this._array = this._array.filter(function (t) {\n                return !particlesToDelete.has(t);\n              });\n              _context3.next = 52;\n              return this._interactionManager.externalInteract(delta);\n            case 52:\n              _iterator9 = _createForOfIteratorHelper(this._array);\n              _context3.prev = 53;\n              _iterator9.s();\n            case 55:\n              if ((_step9 = _iterator9.n()).done) {\n                _context3.next = 64;\n                break;\n              }\n              _particle = _step9.value;\n              _iterator12 = _createForOfIteratorHelper(this.updaters);\n              try {\n                for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n                  updater = _step12.value;\n                  updater.update(_particle, delta);\n                }\n              } catch (err) {\n                _iterator12.e(err);\n              } finally {\n                _iterator12.f();\n              }\n              if (!(!_particle.destroyed && !_particle.spawning)) {\n                _context3.next = 62;\n                break;\n              }\n              _context3.next = 62;\n              return this._interactionManager.particlesInteract(_particle, delta);\n            case 62:\n              _context3.next = 55;\n              break;\n            case 64:\n              _context3.next = 69;\n              break;\n            case 66:\n              _context3.prev = 66;\n              _context3.t2 = _context3[\"catch\"](53);\n              _iterator9.e(_context3.t2);\n            case 69:\n              _context3.prev = 69;\n              _iterator9.f();\n              return _context3.finish(69);\n            case 72:\n              delete container.canvas.resizeFactor;\n            case 73:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[6, 43, 46, 49], [16, 27, 30, 33], [53, 66, 69, 72]]);\n      }));\n      function update(_x2) {\n        return _update.apply(this, arguments);\n      }\n      return update;\n    }()\n  }]);\n  return Particles;\n}();","map":{"version":3,"names":["InteractionManager","Particle","Point","QuadTree","Rectangle","calcPositionFromSize","errorPrefix","qTreeCapacity","qTreeRectangle","canvasSize","width","height","Particles","engine","container","_this","_classCallCheck","_applyDensity","options","manualCount","group","_options$number$densi","number","density","enable","numberOptions","densityFactor","_initDensityFactor","optParticlesNumber","value","optParticlesLimit","limit","particlesNumber","Math","min","particlesCount","count","_array","filter","t","length","push","abs","undefined","removeQuantity","densityOptions","_container","canvas","element","pxRatio","retina","pixelRatio","factor","pow","area","_pushParticle","position","overrideOptions","initializer","particle","pool","pop","init","_nextId","_engine","canAdd","_zArray","dispatchEvent","data","e","console","warn","concat","needsSort","lastZIndex","_interactionManager","size","quadTree","movers","plugins","getMovers","updaters","getUpdaters","_createClass","key","get","addManualParticles","actualOptions","_iterator","_createForOfIteratorHelper","manualParticles","_step","s","n","done","addParticle","mode","err","f","particles","countToRemove","clear","destroy","_draw","_asyncToGenerator","_regeneratorRuntime","mark","_callee","delta","_iterator2","_step2","_step2$value","plugin","_iterator3","_step3","p","wrap","_callee$","_context","prev","next","update","sort","a","b","z","id","_slicedToArray","drawPlugin","draw","stop","_x","apply","arguments","condition","find","handleClickMode","handled","_iterator4","_step4","_step4$value","particlesInitialization","_iterator5","pathGenerators","_step5","_step5$value","pathGenerator","groups","groupOptions","i","j","_groupOptions$number","nb","mouse","pushing","_redraw","_callee2","_callee2$","_context2","redraw","remove","override","removeAt","indexOf","index","quantity","deleted","splice","zIdx","setDensity","_update","_callee3","particlesToDelete","_iterator6","_step6","_step6$value","_iterator7","_step7","_step7$value","_iterator8","_step8","resizeFactor","_iterator10","_step10","_step10$value","_plugin","_iterator11","_step11","mover","_iterator9","_step9","_particle","_iterator12","_step12","updater","_callee3$","_context3","Set","ignoresResizeRatio","x","y","initialPosition","reset","destroyed","abrupt","particleUpdate","t0","finish","isEnabled","move","add","insert","getPosition","t1","has","externalInteract","spawning","particlesInteract","t2","_x2"],"sources":["C:/Users/HP/3D Objects/portfolio/my/node_modules/tsparticles-engine/esm/Core/Particles.js"],"sourcesContent":["import { InteractionManager } from \"./Utils/InteractionManager\";\nimport { Particle } from \"./Particle\";\nimport { Point } from \"./Utils/Point\";\nimport { QuadTree } from \"./Utils/QuadTree\";\nimport { Rectangle } from \"./Utils/Rectangle\";\nimport { calcPositionFromSize } from \"../Utils/NumberUtils\";\nimport { errorPrefix } from \"./Utils/Constants\";\nconst qTreeCapacity = 4;\nconst qTreeRectangle = (canvasSize) => {\n    return new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2);\n};\nexport class Particles {\n    constructor(engine, container) {\n        this._applyDensity = (options, manualCount, group) => {\n            if (!options.number.density?.enable) {\n                return;\n            }\n            const numberOptions = options.number, densityFactor = this._initDensityFactor(numberOptions.density), optParticlesNumber = numberOptions.value, optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber, particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount, particlesCount = Math.min(this.count, this._array.filter((t) => t.group === group).length);\n            this.limit = numberOptions.limit * densityFactor;\n            if (particlesCount < particlesNumber) {\n                this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n            }\n            else if (particlesCount > particlesNumber) {\n                this.removeQuantity(particlesCount - particlesNumber, group);\n            }\n        };\n        this._initDensityFactor = (densityOptions) => {\n            const container = this._container;\n            if (!container.canvas.element || !densityOptions.enable) {\n                return 1;\n            }\n            const canvas = container.canvas.element, pxRatio = container.retina.pixelRatio;\n            return (canvas.width * canvas.height) / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n        };\n        this._pushParticle = (position, overrideOptions, group, initializer) => {\n            try {\n                let particle = this.pool.pop();\n                if (particle) {\n                    particle.init(this._nextId, position, overrideOptions, group);\n                }\n                else {\n                    particle = new Particle(this._engine, this._nextId, this._container, position, overrideOptions, group);\n                }\n                let canAdd = true;\n                if (initializer) {\n                    canAdd = initializer(particle);\n                }\n                if (!canAdd) {\n                    return;\n                }\n                this._array.push(particle);\n                this._zArray.push(particle);\n                this._nextId++;\n                this._engine.dispatchEvent(\"particleAdded\", {\n                    container: this._container,\n                    data: {\n                        particle,\n                    },\n                });\n                return particle;\n            }\n            catch (e) {\n                console.warn(`${errorPrefix} adding particle: ${e}`);\n                return;\n            }\n        };\n        this._engine = engine;\n        this._container = container;\n        this._nextId = 0;\n        this._array = [];\n        this._zArray = [];\n        this.pool = [];\n        this.limit = 0;\n        this.needsSort = false;\n        this.lastZIndex = 0;\n        this._interactionManager = new InteractionManager(this._engine, this._container);\n        const canvasSize = this._container.canvas.size;\n        this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n        this.movers = this._engine.plugins.getMovers(this._container, true);\n        this.updaters = this._engine.plugins.getUpdaters(this._container, true);\n    }\n    get count() {\n        return this._array.length;\n    }\n    addManualParticles() {\n        const container = this._container, options = container.actualOptions;\n        for (const particle of options.manualParticles) {\n            this.addParticle(particle.position\n                ? particle.position.mode === \"precise\"\n                    ? particle.position\n                    : calcPositionFromSize({\n                        size: container.canvas.size,\n                        position: particle.position,\n                    })\n                : undefined, particle.options);\n        }\n    }\n    addParticle(position, overrideOptions, group, initializer) {\n        const container = this._container, options = container.actualOptions, limit = options.particles.number.limit;\n        if (limit > 0) {\n            const countToRemove = this.count + 1 - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        return this._pushParticle(position, overrideOptions, group, initializer);\n    }\n    clear() {\n        this._array = [];\n        this._zArray = [];\n    }\n    destroy() {\n        this._array = [];\n        this._zArray = [];\n        this.movers = [];\n        this.updaters = [];\n    }\n    async draw(delta) {\n        const container = this._container, canvasSize = this._container.canvas.size;\n        this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n        container.canvas.clear();\n        await this.update(delta);\n        if (this.needsSort) {\n            this._zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            this.lastZIndex = this._zArray[this._zArray.length - 1].position.z;\n            this.needsSort = false;\n        }\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this._zArray) {\n            p.draw(delta);\n        }\n    }\n    filter(condition) {\n        return this._array.filter(condition);\n    }\n    find(condition) {\n        return this._array.find(condition);\n    }\n    handleClickMode(mode) {\n        this._interactionManager.handleClickMode(mode);\n    }\n    init() {\n        const container = this._container, options = container.actualOptions;\n        this.lastZIndex = 0;\n        this.needsSort = false;\n        let handled = false;\n        this.updaters = this._engine.plugins.getUpdaters(container, true);\n        this._interactionManager.init();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        this._interactionManager.init();\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.init(container);\n        }\n        this.addManualParticles();\n        if (!handled) {\n            for (const group in options.particles.groups) {\n                const groupOptions = options.particles.groups[group];\n                for (let i = this.count, j = 0; j < groupOptions.number?.value && i < options.particles.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n    }\n    push(nb, mouse, overrideOptions, group) {\n        this.pushing = true;\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse?.position, overrideOptions, group);\n        }\n        this.pushing = false;\n    }\n    async redraw() {\n        this.clear();\n        this.init();\n        await this.draw({ value: 0, factor: 0 });\n    }\n    remove(particle, group, override) {\n        this.removeAt(this._array.indexOf(particle), undefined, group, override);\n    }\n    removeAt(index, quantity = 1, group, override) {\n        if (index < 0 || index > this.count) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            const particle = this._array[i];\n            if (!particle || particle.group !== group) {\n                continue;\n            }\n            particle.destroy(override);\n            this._array.splice(i--, 1);\n            const zIdx = this._zArray.indexOf(particle);\n            this._zArray.splice(zIdx, 1);\n            this.pool.push(particle);\n            deleted++;\n            this._engine.dispatchEvent(\"particleRemoved\", {\n                container: this._container,\n                data: {\n                    particle,\n                },\n            });\n        }\n    }\n    removeQuantity(quantity, group) {\n        this.removeAt(0, quantity, group);\n    }\n    setDensity() {\n        const options = this._container.actualOptions, groups = options.particles.groups;\n        for (const group in groups) {\n            this._applyDensity(groups[group], 0, group);\n        }\n        this._applyDensity(options.particles, options.manualParticles.length);\n    }\n    async update(delta) {\n        const container = this._container, particlesToDelete = new Set();\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.update();\n        }\n        for (const [, plugin] of container.plugins) {\n            plugin.update && plugin.update(delta);\n        }\n        for (const particle of this._array) {\n            const resizeFactor = container.canvas.resizeFactor;\n            if (resizeFactor && !particle.ignoresResizeRatio) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n                particle.initialPosition.x *= resizeFactor.width;\n                particle.initialPosition.y *= resizeFactor.height;\n            }\n            particle.ignoresResizeRatio = false;\n            await this._interactionManager.reset(particle);\n            for (const [, plugin] of this._container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                if (plugin.particleUpdate) {\n                    plugin.particleUpdate(particle, delta);\n                }\n            }\n            for (const mover of this.movers) {\n                if (mover.isEnabled(particle)) {\n                    mover.move(particle, delta);\n                }\n            }\n            if (particle.destroyed) {\n                particlesToDelete.add(particle);\n                continue;\n            }\n            this.quadTree.insert(new Point(particle.getPosition(), particle));\n        }\n        this._array = this._array.filter((t) => !particlesToDelete.has(t));\n        await this._interactionManager.externalInteract(delta);\n        for (const particle of this._array) {\n            for (const updater of this.updaters) {\n                updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                await this._interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete container.canvas.resizeFactor;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}