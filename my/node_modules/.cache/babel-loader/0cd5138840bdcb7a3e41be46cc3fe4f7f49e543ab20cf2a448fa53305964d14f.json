{"ast":null,"code":"import Particles from\"react-tsparticles\";import{loadSlim}from\"tsparticles-slim\";// loads tsparticles-slim\n//import { loadFull } from \"tsparticles\"; // loads tsparticles\nimport{useCallback,useMemo}from\"react\";// tsParticles Repository: https://github.com/matteobruni/tsparticles\n// tsParticles Website: https://particles.js.org/\nimport{jsx as _jsx}from\"react/jsx-runtime\";var ParticlesComponent=function ParticlesComponent(props){// using useMemo is not mandatory, but it's recommended since this value can be memoized if static\nvar options=useMemo(function(){// using an empty options object will load the default options, which are static particles with no background and 3px radius, opacity 100%, white color\n// all options can be found here: https://particles.js.org/docs/interfaces/Options_Interfaces_IOptions.IOptions.html\nreturn{background:{color:\"#000\"// this sets a background color for the canvas\n},fullScreen:{enable:true,// enabling this will make the canvas fill the entire screen, it's enabled by default\nzIndex:-1// this is the z-index value used when the fullScreen is enabled, it's 0 by default\n},interactivity:{events:{onClick:{enable:true,// enables the click event\nmode:\"push\"// adds the particles on click\n},onHover:{enable:true,// enables the hover event\nmode:\"repulse\"// make the particles run away from the cursor\n}},modes:{push:{quantity:2// number of particles to add on click\n},repulse:{distance:70// distance of the particles from the cursor\n}}},particles:{links:{enable:true,// enabling this will make particles linked together\ndistance:200// maximum distance for linking the particles\n},move:{enable:true,// enabling this will make particles move in the canvas\nspeed:{min:1,max:4}// using a range in speed value will make particles move in a random speed between min/max values, each particles have its own value, it won't change in time by default\n},opacity:{value:{min:0.3,max:0.7}// using a different opacity, to have some semitransparent effects\n},size:{value:{min:1,max:4}// let's randomize the particles size a bit\n}}};},[]);// useCallback is not mandatory, but it's recommended since this callback can be memoized if static\nvar particlesInit=useCallback(function(engine){loadSlim(engine);// loadFull(engine); // for this sample the slim version is enough, choose whatever you prefer, slim is smaller in size but doesn't have all the plugins and the mouse trail feature\n},[]);// setting an id can be useful for identifying the right particles component, this is useful for multiple instances or reusable components\nreturn/*#__PURE__*/_jsx(Particles,{id:props.id,init:particlesInit,options:options});};export default ParticlesComponent;","map":{"version":3,"names":["Particles","loadSlim","useCallback","useMemo","jsx","_jsx","ParticlesComponent","props","options","background","color","fullScreen","enable","zIndex","interactivity","events","onClick","mode","onHover","modes","push","quantity","repulse","distance","particles","links","move","speed","min","max","opacity","value","size","particlesInit","engine","id","init"],"sources":["C:/Users/HP/3D Objects/portfolio/my/src/Particle.js"],"sourcesContent":["import Particles from \"react-tsparticles\";\r\nimport { loadSlim } from \"tsparticles-slim\"; // loads tsparticles-slim\r\n//import { loadFull } from \"tsparticles\"; // loads tsparticles\r\nimport { useCallback, useMemo } from \"react\";\r\n\r\n// tsParticles Repository: https://github.com/matteobruni/tsparticles\r\n// tsParticles Website: https://particles.js.org/\r\nconst ParticlesComponent = (props) => {\r\n  // using useMemo is not mandatory, but it's recommended since this value can be memoized if static\r\n  const options = useMemo(() => {\r\n    // using an empty options object will load the default options, which are static particles with no background and 3px radius, opacity 100%, white color\r\n    // all options can be found here: https://particles.js.org/docs/interfaces/Options_Interfaces_IOptions.IOptions.html\r\n    return {\r\n      background: {\r\n        color: \"#000\", // this sets a background color for the canvas\r\n      },\r\n      fullScreen: {\r\n        enable: true, // enabling this will make the canvas fill the entire screen, it's enabled by default\r\n        zIndex: -1, // this is the z-index value used when the fullScreen is enabled, it's 0 by default\r\n      },\r\n      interactivity: {\r\n        events: {\r\n        onClick :{\r\n            enable: true, // enables the click event\r\n            mode: \"push\", // adds the particles on click\r\n          },\r\n          onHover: {\r\n            enable: true, // enables the hover event\r\n            mode: \"repulse\", // make the particles run away from the cursor\r\n          },\r\n        },\r\n        modes: {\r\n          push: {\r\n            quantity: 2, // number of particles to add on click\r\n          },\r\n          repulse: {\r\n            distance: 70, // distance of the particles from the cursor\r\n          },\r\n        },\r\n      },\r\n      particles: {\r\n        links: {\r\n          enable: true, // enabling this will make particles linked together\r\n          distance: 200, // maximum distance for linking the particles\r\n        },\r\n        move: {\r\n          enable: true, // enabling this will make particles move in the canvas\r\n          speed: { min:1, max: 4 }, // using a range in speed value will make particles move in a random speed between min/max values, each particles have its own value, it won't change in time by default\r\n        },\r\n        opacity: {\r\n          value: { min: 0.3, max: 0.7 }, // using a different opacity, to have some semitransparent effects\r\n        },\r\n        size: {\r\n          value: { min: 1, max: 4 }, // let's randomize the particles size a bit\r\n        },\r\n      },\r\n    };\r\n  }, []);\r\n\r\n  // useCallback is not mandatory, but it's recommended since this callback can be memoized if static\r\n  const particlesInit = useCallback((engine) => {\r\n    loadSlim(engine);\r\n    // loadFull(engine); // for this sample the slim version is enough, choose whatever you prefer, slim is smaller in size but doesn't have all the plugins and the mouse trail feature\r\n  }, []);\r\n\r\n  // setting an id can be useful for identifying the right particles component, this is useful for multiple instances or reusable components\r\n  return <Particles id={props.id} init={particlesInit} options={options} />;\r\n \r\n};\r\n\r\nexport default ParticlesComponent;"],"mappings":"AAAA,MAAO,CAAAA,SAAS,KAAM,mBAAmB,CACzC,OAASC,QAAQ,KAAQ,kBAAkB,CAAE;AAC7C;AACA,OAASC,WAAW,CAAEC,OAAO,KAAQ,OAAO,CAE5C;AACA;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,GAAM,CAAAC,kBAAkB,CAAG,QAArB,CAAAA,kBAAkBA,CAAIC,KAAK,CAAK,CACpC;AACA,GAAM,CAAAC,OAAO,CAAGL,OAAO,CAAC,UAAM,CAC5B;AACA;AACA,MAAO,CACLM,UAAU,CAAE,CACVC,KAAK,CAAE,MAAQ;AACjB,CAAC,CACDC,UAAU,CAAE,CACVC,MAAM,CAAE,IAAI,CAAE;AACdC,MAAM,CAAE,CAAC,CAAG;AACd,CAAC,CACDC,aAAa,CAAE,CACbC,MAAM,CAAE,CACRC,OAAO,CAAE,CACLJ,MAAM,CAAE,IAAI,CAAE;AACdK,IAAI,CAAE,MAAQ;AAChB,CAAC,CACDC,OAAO,CAAE,CACPN,MAAM,CAAE,IAAI,CAAE;AACdK,IAAI,CAAE,SAAW;AACnB,CACF,CAAC,CACDE,KAAK,CAAE,CACLC,IAAI,CAAE,CACJC,QAAQ,CAAE,CAAG;AACf,CAAC,CACDC,OAAO,CAAE,CACPC,QAAQ,CAAE,EAAI;AAChB,CACF,CACF,CAAC,CACDC,SAAS,CAAE,CACTC,KAAK,CAAE,CACLb,MAAM,CAAE,IAAI,CAAE;AACdW,QAAQ,CAAE,GAAK;AACjB,CAAC,CACDG,IAAI,CAAE,CACJd,MAAM,CAAE,IAAI,CAAE;AACde,KAAK,CAAE,CAAEC,GAAG,CAAC,CAAC,CAAEC,GAAG,CAAE,CAAE,CAAG;AAC5B,CAAC,CACDC,OAAO,CAAE,CACPC,KAAK,CAAE,CAAEH,GAAG,CAAE,GAAG,CAAEC,GAAG,CAAE,GAAI,CAAG;AACjC,CAAC,CACDG,IAAI,CAAE,CACJD,KAAK,CAAE,CAAEH,GAAG,CAAE,CAAC,CAAEC,GAAG,CAAE,CAAE,CAAG;AAC7B,CACF,CACF,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,GAAM,CAAAI,aAAa,CAAG/B,WAAW,CAAC,SAACgC,MAAM,CAAK,CAC5CjC,QAAQ,CAACiC,MAAM,CAAC,CAChB;AACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,mBAAO7B,IAAA,CAACL,SAAS,EAACmC,EAAE,CAAE5B,KAAK,CAAC4B,EAAG,CAACC,IAAI,CAAEH,aAAc,CAACzB,OAAO,CAAEA,OAAQ,EAAG,CAE3E,CAAC,CAED,cAAe,CAAAF,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}