{"ast":null,"code":"import _classCallCheck from \"C:/Users/HP/3D Objects/portfolio/my/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/HP/3D Objects/portfolio/my/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { deepExtend } from \"../../../../Utils/Utils\";\nvar charKey = \"character\",\n  charAltKey = \"char\",\n  imageKey = \"image\",\n  imageAltKey = \"images\",\n  polygonKey = \"polygon\",\n  polygonAltKey = \"star\";\nexport var Shape = /*#__PURE__*/function () {\n  function Shape() {\n    var _this = this;\n    _classCallCheck(this, Shape);\n    this.loadShape = function (item, mainKey, altKey, altOverride) {\n      var _this$options$mainKey;\n      if (!item) {\n        return;\n      }\n      var isArray = item instanceof Array,\n        emptyValue = isArray ? [] : {},\n        mainDifferentValues = isArray !== _this.options[mainKey] instanceof Array,\n        altDifferentValues = isArray !== _this.options[altKey] instanceof Array;\n      if (mainDifferentValues) {\n        _this.options[mainKey] = emptyValue;\n      }\n      if (altDifferentValues && altOverride) {\n        _this.options[altKey] = emptyValue;\n      }\n      _this.options[mainKey] = deepExtend((_this$options$mainKey = _this.options[mainKey]) !== null && _this$options$mainKey !== void 0 ? _this$options$mainKey : emptyValue, item);\n      if (!_this.options[altKey] || altOverride) {\n        var _this$options$altKey;\n        _this.options[altKey] = deepExtend((_this$options$altKey = _this.options[altKey]) !== null && _this$options$altKey !== void 0 ? _this$options$altKey : emptyValue, item);\n      }\n    };\n    this.close = true;\n    this.fill = true;\n    this.options = {};\n    this.type = \"circle\";\n  }\n  _createClass(Shape, [{\n    key: \"character\",\n    get: function get() {\n      var _this$options$charKey;\n      return (_this$options$charKey = this.options[charKey]) !== null && _this$options$charKey !== void 0 ? _this$options$charKey : this.options[charAltKey];\n    },\n    set: function set(value) {\n      this.options[charAltKey] = this.options[charKey] = value;\n    }\n  }, {\n    key: \"custom\",\n    get: function get() {\n      return this.options;\n    },\n    set: function set(value) {\n      this.options = value;\n    }\n  }, {\n    key: \"image\",\n    get: function get() {\n      var _this$options$imageKe;\n      return (_this$options$imageKe = this.options[imageKey]) !== null && _this$options$imageKe !== void 0 ? _this$options$imageKe : this.options[imageAltKey];\n    },\n    set: function set(value) {\n      this.options[imageAltKey] = this.options[imageKey] = value;\n    }\n  }, {\n    key: \"images\",\n    get: function get() {\n      return this.image;\n    },\n    set: function set(value) {\n      this.image = value;\n    }\n  }, {\n    key: \"polygon\",\n    get: function get() {\n      var _this$options$polygon;\n      return (_this$options$polygon = this.options[polygonKey]) !== null && _this$options$polygon !== void 0 ? _this$options$polygon : this.options[polygonAltKey];\n    },\n    set: function set(value) {\n      this.options[polygonAltKey] = this.options[polygonKey] = value;\n    }\n  }, {\n    key: \"stroke\",\n    get: function get() {\n      return [];\n    },\n    set: function set(_value) {}\n  }, {\n    key: \"load\",\n    value: function load(data) {\n      var _data$options, _data$image;\n      if (!data) {\n        return;\n      }\n      var options = (_data$options = data.options) !== null && _data$options !== void 0 ? _data$options : data.custom;\n      if (options !== undefined) {\n        for (var shape in options) {\n          var item = options[shape];\n          if (item) {\n            var _this$options$shape;\n            this.options[shape] = deepExtend((_this$options$shape = this.options[shape]) !== null && _this$options$shape !== void 0 ? _this$options$shape : {}, item);\n          }\n        }\n      }\n      this.loadShape(data.character, charKey, charAltKey, true);\n      this.loadShape(data.polygon, polygonKey, polygonAltKey, false);\n      this.loadShape((_data$image = data.image) !== null && _data$image !== void 0 ? _data$image : data.images, imageKey, imageAltKey, true);\n      if (data.close !== undefined) {\n        this.close = data.close;\n      }\n      if (data.fill !== undefined) {\n        this.fill = data.fill;\n      }\n      if (data.type !== undefined) {\n        this.type = data.type;\n      }\n    }\n  }]);\n  return Shape;\n}();","map":{"version":3,"names":["deepExtend","charKey","charAltKey","imageKey","imageAltKey","polygonKey","polygonAltKey","Shape","_this","_classCallCheck","loadShape","item","mainKey","altKey","altOverride","_this$options$mainKey","isArray","Array","emptyValue","mainDifferentValues","options","altDifferentValues","_this$options$altKey","close","fill","type","_createClass","key","get","_this$options$charKey","set","value","_this$options$imageKe","image","_this$options$polygon","_value","load","data","_data$options","_data$image","custom","undefined","shape","_this$options$shape","character","polygon","images"],"sources":["C:/Users/HP/3D Objects/portfolio/my/node_modules/tsparticles-engine/esm/Options/Classes/Particles/Shape/Shape.js"],"sourcesContent":["import { deepExtend } from \"../../../../Utils/Utils\";\nconst charKey = \"character\", charAltKey = \"char\", imageKey = \"image\", imageAltKey = \"images\", polygonKey = \"polygon\", polygonAltKey = \"star\";\nexport class Shape {\n    constructor() {\n        this.loadShape = (item, mainKey, altKey, altOverride) => {\n            if (!item) {\n                return;\n            }\n            const isArray = item instanceof Array, emptyValue = isArray ? [] : {}, mainDifferentValues = isArray !== this.options[mainKey] instanceof Array, altDifferentValues = isArray !== this.options[altKey] instanceof Array;\n            if (mainDifferentValues) {\n                this.options[mainKey] = emptyValue;\n            }\n            if (altDifferentValues && altOverride) {\n                this.options[altKey] = emptyValue;\n            }\n            this.options[mainKey] = deepExtend(this.options[mainKey] ?? emptyValue, item);\n            if (!this.options[altKey] || altOverride) {\n                this.options[altKey] = deepExtend(this.options[altKey] ?? emptyValue, item);\n            }\n        };\n        this.close = true;\n        this.fill = true;\n        this.options = {};\n        this.type = \"circle\";\n    }\n    get character() {\n        return (this.options[charKey] ?? this.options[charAltKey]);\n    }\n    set character(value) {\n        this.options[charAltKey] = this.options[charKey] = value;\n    }\n    get custom() {\n        return this.options;\n    }\n    set custom(value) {\n        this.options = value;\n    }\n    get image() {\n        return (this.options[imageKey] ?? this.options[imageAltKey]);\n    }\n    set image(value) {\n        this.options[imageAltKey] = this.options[imageKey] = value;\n    }\n    get images() {\n        return this.image;\n    }\n    set images(value) {\n        this.image = value;\n    }\n    get polygon() {\n        return (this.options[polygonKey] ?? this.options[polygonAltKey]);\n    }\n    set polygon(value) {\n        this.options[polygonAltKey] = this.options[polygonKey] = value;\n    }\n    get stroke() {\n        return [];\n    }\n    set stroke(_value) {\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        const options = data.options ?? data.custom;\n        if (options !== undefined) {\n            for (const shape in options) {\n                const item = options[shape];\n                if (item) {\n                    this.options[shape] = deepExtend(this.options[shape] ?? {}, item);\n                }\n            }\n        }\n        this.loadShape(data.character, charKey, charAltKey, true);\n        this.loadShape(data.polygon, polygonKey, polygonAltKey, false);\n        this.loadShape(data.image ?? data.images, imageKey, imageAltKey, true);\n        if (data.close !== undefined) {\n            this.close = data.close;\n        }\n        if (data.fill !== undefined) {\n            this.fill = data.fill;\n        }\n        if (data.type !== undefined) {\n            this.type = data.type;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}